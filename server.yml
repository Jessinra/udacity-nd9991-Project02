Description: >
    Deploy a High-Availability Web App using CloudFormation
    Servers requieres LoadBalancer, Launch Configuration, AutoScaling group a health check, security groups and a Listener and Target Group.
    Additionally, IAM Role to access S3

Parameters:
    ProjectName:
        Description: A name that will be prefixed to resource names
        Type: String
    WebAppImageId:
        Description: The image to use for the WebApp
        Type: String
    WebAppInstanceType:
        Description: The instance type to use for the WebApp
        Type: String
    WebAppVolumeSize:
        Description: The volume size to use for the WebApp
        Type: Number
    WebAppAutoScalingMin:
        Description: The minimum number of instances to use for the WebApp
        Type: Number
    WebAppAutoScalingMax:
        Description: The maximum number of instances to use for the WebApp
        Type: Number
    WebAppAutoScalingDesired:
      Description: The desired number of instances to use for the WebApp
      Type: Number
    BastionKeyPair:
        Description: Key pair to ssh bastion
        Type: String

Resources:
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://udacity-demo-1/udacity.zip .
                unzip -o udacity.zip     
            IamInstanceProfile: !Ref WebAppInstanceProfile
            ImageId: !Ref WebAppImageId
            SecurityGroups:
              - !Ref WebAppSecurityGroup
            InstanceType: !Ref WebAppInstanceType
            BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                  VolumeSize: !Ref WebAppVolumeSize

    WebAppSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
              Fn::ImportValue: !Sub "${ProjectName}-VPC"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName

    WebAppInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            InstanceProfileName: S3-readonly-profile
            Roles:
              - !Ref S3ReadonlyRole

    S3ReadonlyRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: ec2-S3-readonly-role
            Description: IAM Role for S3 readonly access
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - ec2.amazonaws.com
                    Action:
                      - "sts:AssumeRole"
            Path: /
            Policies:
              - PolicyName: S3ReadOnlyPolicy
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - "s3:GetObject"
                          - "s3:ListBucket"
                        Resource:
                          - "arn:aws:s3:::udacity-demo-1"
                          - "arn:aws:s3:::udacity-demo-1/*"
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName

    # ========================= WebAppAutoScalingGroup ===================================
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
              - Fn::ImportValue: !Sub "${ProjectName}-PrivateSubnets"
            LaunchConfigurationName: !Ref WebAppLaunchConfig
            DesiredCapacity: !Ref WebAppAutoScalingDesired
            MinSize: !Ref WebAppAutoScalingMin
            MaxSize: !Ref WebAppAutoScalingMax
            TargetGroupARNs:
              - !Ref WebAppTargetGroup
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName
                PropagateAtLaunch: true

    # ========================= Load Balancers ===================================
    WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub "${ProjectName}-ALB"
            Subnets:
              - Fn::ImportValue: !Sub "${ProjectName}-PublicSubnet1"
              - Fn::ImportValue: !Sub "${ProjectName}-PublicSubnet2"
            SecurityGroups:
              - !Ref ALBSecurityGroup
            Type: application
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName

    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
              Fn::ImportValue: !Sub "${ProjectName}-VPC"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName

    ALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLoadBalancer
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
              - Type: forward
                TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
              - Field: path-pattern
                Values: [/]
            ListenerArn: !Ref ALBListener
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
              Fn::ImportValue: !Sub "${ProjectName}-VPC"
            Tags: 
              - Key: Name 
                Value: !Ref ProjectName

    # ========================= Bastions ===================================
    BastionHost:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: t3.micro
            ImageId: ami-0747bdcabd34c712a
            KeyName: !Ref BastionKeyPair
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeviceIndex: "0"
                GroupSet: 
                  - !Ref BastionSecurityGroup
                SubnetId: 
                  Fn::ImportValue: !Sub "${ProjectName}-PublicSubnet1"
            BlockDeviceMappings:
              - DeviceName: "/dev/sdk"
                Ebs:
                  VolumeSize: 10
            Tags: 
              - Key: Name 
                Value: !Sub "${ProjectName}-Bastion"
    
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow bastion to do SSH to our hosts
            VpcId:
              Fn::ImportValue: !Sub "${ProjectName}-VPC"
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
            Tags: 
              - Key: Name 
                Value: !Sub "${ProjectName}-Bastion SG"

Outputs: 
    WebAppLoadBalancer: 
        Description: A reference to the created application load balancer
        Value: !Sub http://${WebAppLoadBalancer.DNSName} 
        Export:
            Name: !Sub ${ProjectName}-AppLoadBalancer-DNS